{"version":3,"sources":["../../src/utilities/normalizeNetworkResourceUrl.js"],"names":["targetUrl","resourceUrl","targetUrlTokens","URL","parse","resourceUrlTokens","protocol","host","String","path"],"mappings":";;;;;;AAEA;;;;;;AAEA;;;;;;;kBAOe,CAACA,SAAD,EAAoBC,WAApB,KAAoD;AACjE,QAAMC,kBAAkBC,cAAIC,KAAJ,CAAUJ,SAAV,CAAxB;AACA,QAAMK,oBAAoBF,cAAIC,KAAJ,CAAUH,WAAV,CAA1B;;AAEA,MAAIC,gBAAgBI,QAAhB,KAA6BD,kBAAkBC,QAA/C,IAA2DJ,gBAAgBK,IAAhB,KAAyBF,kBAAkBE,IAA1G,EAAgH;AAC9G,WAAON,WAAP;AACD;;AAED,SAAOO,OAAOH,kBAAkBI,IAAzB,CAAP;AACD,C","file":"normalizeNetworkResourceUrl.js","sourcesContent":["// @flow\n\nimport URL from 'url';\n\n/**\n * It is important to load to use relative URLs when the protocol and host match.\n * This is because pre-rendering might be done against a different URL than the\n * actual website, e.g. https://raw.gajus.com/ instead of https://gajus.com/.\n * Therefore, we need to ensure that resources are loaded relative to the\n * current host.\n */\nexport default (targetUrl: string, resourceUrl: string): string => {\n  const targetUrlTokens = URL.parse(targetUrl);\n  const resourceUrlTokens = URL.parse(resourceUrl);\n\n  if (targetUrlTokens.protocol !== resourceUrlTokens.protocol || targetUrlTokens.host !== resourceUrlTokens.host) {\n    return resourceUrl;\n  }\n\n  return String(resourceUrlTokens.path);\n};\n"]}