{"version":3,"sources":["../src/usus.js"],"names":["debug","launchChrome","chromeFlags","inlineStyles","DOM","Runtime","rootNodeId","styles","evaluate","expression","nodeId","querySelector","selector","stylesheet","setOuterHTML","outerHTML","inlineImports","styleImports","join","inlineStylePreload","x","styleUrls","stylePreloadLinks","map","styleUrl","inlineFontPreload","fontUrls","fontUrl","render","url","userConfiguration","configuration","JSON","stringify","chrome","chromePort","port","protocol","end","close","kill","CSS","Emulation","Network","Page","enable","setDeviceMetricsOverride","deviceMetricsOverride","cookies","cookie","setCookie","name","value","inlineStylesheetIndex","alienFrameStylesheetIndex","styleSheetAdded","header","mainFrameId","frameId","Error","push","styleSheetId","isInline","startRuleUsageTracking","frame","navigate","downloadedFontUrls","requestWillBeSent","request","tokens","URL","parse","pathname","endsWith","href","usedStyles","Promise","resolve","loadEventFired","delay","rules","takeCoverageDelta","usedRules","coverage","filter","rule","used","slices","usedRule","includes","getStyleSheetText","text","slice","startOffset","endOffset","stopRuleUsageTracking","formatStyles","rootDocument","getDocument","styleImportNodeIds","querySelectorAll","root","nodeIds","length","styleImportLinks","styleImportNodeId","styleImportNodeHtml","getOuterHTML","removeNode","preloadStyles","preloadFonts","rootOuterHTMLWithInlinedStyles","extractStyles","rootOuterHTML"],"mappings":"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","file":"usus.js","sourcesContent":["// @flow\n\nimport URL from 'url';\nimport {\n  launch\n} from 'chrome-launcher';\nimport CDP from 'chrome-remote-interface';\nimport createDebug from 'debug';\nimport surgeon from 'surgeon';\nimport {\n  delay\n} from 'bluefeather';\nimport createConfiguration from './factories/createConfiguration';\nimport normalizeNetworkResourceUrl from './utilities/normalizeNetworkResourceUrl';\nimport type {\n  UserConfigurationType\n} from './types';\n\nconst debug = createDebug('usus');\n\nexport const launchChrome = () => {\n  return launch({\n    chromeFlags: [\n      '--disable-gpu',\n      '--headless',\n      '--no-sandbox'\n    ]\n  });\n};\n\nconst inlineStyles = async (DOM: *, Runtime: *, rootNodeId: number, styles: string) => {\n  // @todo I am sure there is a better way to do this,\n  // but I cannot find it documented in the https://chromedevtools.github.io/devtools-protocol/tot/DOM/\n  // e.g. How to create a new node using CDP DOM API?\n  await Runtime.evaluate({\n    expression: `\n      {\n        const styleElement = document.createElement('div');\n        styleElement.setAttribute('id', 'usus-inline-styles');\n        document.head.appendChild(styleElement);\n      }\n    `\n  });\n\n  const nodeId = (await DOM.querySelector({\n    nodeId: rootNodeId,\n    selector: '#usus-inline-styles'\n  })).nodeId;\n\n  debug('#usus-inline-styles nodeId %d', nodeId);\n\n  const stylesheet = `<style>${styles}</style>`;\n\n  await DOM.setOuterHTML({\n    nodeId,\n    outerHTML: stylesheet\n  });\n};\n\nconst inlineImports = async (DOM: *, Runtime: *, rootNodeId: number, styleImports: $ReadOnlyArray<string>) => {\n  // @todo See note in inlineStyles.\n\n  await Runtime.evaluate({\n    expression: `\n      {\n        const scriptElement = document.createElement('div');\n        scriptElement.setAttribute('id', 'usus-style-import');\n        document.body.appendChild(scriptElement);\n      }\n    `\n  });\n\n  const nodeId = (await DOM.querySelector({\n    nodeId: rootNodeId,\n    selector: '#usus-style-import'\n  })).nodeId;\n\n  debug('#usus-style-import nodeId %d', nodeId);\n\n  await DOM.setOuterHTML({\n    nodeId,\n    outerHTML: styleImports.join('\\n')\n  });\n};\n\nconst inlineStylePreload = async (DOM: *, Runtime: *, rootNodeId: number, styleImports: $ReadOnlyArray<string>) => {\n  // @todo See note in inlineStyles.\n\n  await Runtime.evaluate({\n    expression: `\n      {\n        const scriptElement = document.createElement('div');\n        scriptElement.setAttribute('id', 'usus-style-preload');\n        document.head.appendChild(scriptElement);\n      }\n    `\n  });\n\n  const nodeId = (await DOM.querySelector({\n    nodeId: rootNodeId,\n    selector: '#usus-style-preload'\n  })).nodeId;\n\n  debug('#usus-style-preload nodeId %d', nodeId);\n\n  const x = surgeon();\n\n  const styleUrls = x('select link {0,} | read attribute href', styleImports.join(''));\n\n  const stylePreloadLinks = styleUrls\n    .map((styleUrl) => {\n      return `<link rel=\"preload\" href=\"${styleUrl}\" as=\"style\">`;\n    });\n\n  await DOM.setOuterHTML({\n    nodeId,\n    outerHTML: stylePreloadLinks.join('\\n')\n  });\n};\n\nconst inlineFontPreload = async (DOM: *, Runtime: *, rootNodeId: number, fontUrls: $ReadOnlyArray<string>) => {\n  // @todo See note in inlineStyles.\n\n  await Runtime.evaluate({\n    expression: `\n      {\n        const scriptElement = document.createElement('div');\n        scriptElement.setAttribute('id', 'usus-font-preload');\n        document.head.appendChild(scriptElement);\n      }\n    `\n  });\n\n  const nodeId = (await DOM.querySelector({\n    nodeId: rootNodeId,\n    selector: '#usus-font-preload'\n  })).nodeId;\n\n  debug('#usus-font-preload nodeId %d', nodeId);\n\n  const stylePreloadLinks = fontUrls\n    .map((fontUrl) => {\n      return `<link rel=\"preload\" href=\"${fontUrl}\" as=\"font\">`;\n    });\n\n  await DOM.setOuterHTML({\n    nodeId,\n    outerHTML: stylePreloadLinks.join('\\n')\n  });\n};\n\nexport const render = async (url: string, userConfiguration: UserConfigurationType = {}): Promise<string> => {\n  const configuration = createConfiguration(userConfiguration);\n\n  debug('rendering URL %s', JSON.stringify(configuration));\n\n  let chrome;\n  let chromePort;\n\n  if (configuration.chromePort) {\n    debug('attempting to use the user provided instance of Chrome (port %d)', configuration.chromePort);\n\n    chromePort = configuration.chromePort;\n  } else {\n    chrome = await launchChrome();\n    chromePort = chrome.port;\n  }\n\n  const protocol = await CDP({\n    port: chromePort\n  });\n\n  const end = async (): Promise<void> => {\n    await protocol.close();\n\n    if (!chrome) {\n      return;\n    }\n\n    await chrome.kill();\n  };\n\n  const {\n    CSS,\n    DOM,\n    Emulation,\n    Network,\n    Page,\n    Runtime\n  } = protocol;\n\n  await DOM.enable();\n  await CSS.enable();\n  await Page.enable();\n  await Runtime.enable();\n  await Network.enable();\n\n  Emulation.setDeviceMetricsOverride(configuration.deviceMetricsOverride);\n\n  for (const cookie of configuration.cookies) {\n    Network.setCookie({\n      name: cookie.name,\n      url,\n      value: cookie.value\n    });\n  }\n\n  const inlineStylesheetIndex = [];\n  const alienFrameStylesheetIndex = [];\n\n  CSS.styleSheetAdded(({header}) => {\n    // eslint-disable-next-line no-use-before-define\n    const mainFrameId = frameId;\n\n    if (!mainFrameId) {\n      throw new Error('Stylesheet has been added before frameId has been established.');\n    }\n\n    if (header.frameId !== mainFrameId) {\n      alienFrameStylesheetIndex.push(header.styleSheetId);\n    }\n\n    if (header.isInline) {\n      inlineStylesheetIndex.push(header.styleSheetId);\n    }\n  });\n\n  await CSS.startRuleUsageTracking();\n\n  const frame = await Page.navigate({\n    url\n  });\n\n  const downloadedFontUrls = [];\n\n  Network.requestWillBeSent((request) => {\n    if (request.frameId !== frame.frameId) {\n      debug('ignoring HTTP request; alien frame');\n\n      return;\n    }\n\n    const tokens = URL.parse(request.request.url);\n\n    const pathname = tokens.pathname;\n\n    if (!pathname) {\n      debug('ignoring HTTP request; URL is missing pathname');\n\n      return;\n    }\n\n    if (!pathname.endsWith('.woff') && !pathname.endsWith('.woff2')) {\n      debug('ignoring HTTP request; network resource is not a supported font');\n\n      return;\n    }\n\n    downloadedFontUrls.push(normalizeNetworkResourceUrl(url, tokens.href));\n  });\n\n  const frameId = frame.frameId;\n\n  let usedStyles;\n\n  usedStyles = await new Promise((resolve) => {\n    Page.loadEventFired(async () => {\n      debug('\"load\" event received; waiting %d milliseconds before capturing the CSS coverage report', configuration.delay);\n\n      await delay(configuration.delay);\n\n      debug('alien stylesheets', inlineStylesheetIndex);\n      debug('inline stylesheets', inlineStylesheetIndex);\n\n      const rules = await CSS.takeCoverageDelta();\n\n      const usedRules = rules.coverage\n        .filter((rule) => {\n          return rule.used;\n        });\n\n      const slices = [];\n\n      for (const usedRule of usedRules) {\n        if (alienFrameStylesheetIndex.includes(usedRule.styleSheetId)) {\n          debug('skipping alien stylesheet %d', usedRule.styleSheetId);\n\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        if (inlineStylesheetIndex.includes(usedRule.styleSheetId)) {\n          debug('skipping inline stylesheet %d', usedRule.styleSheetId);\n\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n\n        const stylesheet = await CSS.getStyleSheetText({\n          styleSheetId: usedRule.styleSheetId\n        });\n\n        slices.push(stylesheet.text.slice(usedRule.startOffset, usedRule.endOffset));\n      }\n\n      resolve(slices.join(''));\n    });\n  });\n\n  await CSS.stopRuleUsageTracking();\n\n  if (configuration.formatStyles) {\n    usedStyles = await configuration.formatStyles(usedStyles);\n  }\n\n  const rootDocument = await DOM.getDocument();\n\n  if (configuration.inlineStyles) {\n    const styleImportNodeIds = (await DOM.querySelectorAll({\n      nodeId: rootDocument.root.nodeId,\n      selector: 'head link[rel=\"stylesheet\"]'\n    })).nodeIds;\n\n    debug('found %d style imports contained in the <head> element', styleImportNodeIds.length);\n\n    const styleImportLinks = [];\n\n    for (const styleImportNodeId of styleImportNodeIds) {\n      const styleImportNodeHtml = await DOM.getOuterHTML({\n        nodeId: styleImportNodeId\n      });\n\n      // @todo Add ability to conditionally allow certain nodes.\n      debug('found CSS import; removing import from the <head> element', styleImportNodeHtml);\n\n      await DOM.removeNode({\n        nodeId: styleImportNodeId\n      });\n\n      styleImportLinks.push(styleImportNodeHtml.outerHTML);\n    }\n\n    if (configuration.preloadStyles) {\n      await inlineStylePreload(DOM, Runtime, rootDocument.root.nodeId, styleImportLinks);\n    }\n\n    if (configuration.preloadFonts) {\n      await inlineFontPreload(DOM, Runtime, rootDocument.root.nodeId, downloadedFontUrls);\n    }\n\n    if (usedStyles) {\n      await inlineStyles(DOM, Runtime, rootDocument.root.nodeId, usedStyles);\n    }\n\n    await inlineImports(DOM, Runtime, rootDocument.root.nodeId, styleImportLinks);\n\n    const rootOuterHTMLWithInlinedStyles = (await DOM.getOuterHTML({\n      nodeId: rootDocument.root.nodeId\n    })).outerHTML;\n\n    await end();\n\n    return rootOuterHTMLWithInlinedStyles;\n  }\n\n  if (configuration.extractStyles) {\n    await end();\n\n    // @todo Document that `extractStyles` does not return the inline stylesheets.\n    // @todo Document that `extractStyles` does not return the alien stylesheets.\n\n    return usedStyles;\n  }\n\n  const rootOuterHTML = (await DOM.getOuterHTML({\n    nodeId: rootDocument.root.nodeId\n  })).outerHTML;\n\n  await end();\n\n  return rootOuterHTML;\n};\n"]}